#!/usr/bin/env python3

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import getpass
import json
import os
import socket
import sys

_HISTORY_FILE = os.path.join(
    os.getenv('HOME'), '.local', 'share', 'shell-history', 'log.json')


def append(args):
  """Appends to the shell history.

  Args:
    args: Sequence of command-line arguments to log, each of the form
      'key=value'. Duplicate keys are not allowed, and duplicates of default
      keys (see implementation) are also not allowed. Some keys are required
      (see implementation).
  """
  message = {
      'host': socket.getfqdn(),
      'timestamp': datetime.datetime.now(datetime.timezone.utc).isoformat(),
      'type': 'shell',
      'user': getpass.getuser(),
  }
  additional_required_keys = ('pid',)
  for arg in args:
    key, sep, value = arg.partition('=')
    if not key or not sep:
      raise ValueError('Invalid argument: {!r}.'.format(arg))
    if key in message:
      raise ValueError('Duplicate key: {!r}.'.format(key))
    message[key] = value
  if any((x not in message for x in additional_required_keys)):
    raise ValueError('Missing required key.')
  line = json.dumps(message) + '\n'
  with open(_HISTORY_FILE, 'a') as fh:
    fh.write(line)


def main(args):
  if any((x.startswith('-') for x in args)):
    raise ValueError('Unknown flag in {!r}.'.format(args))
  elif args[0] == 'append':
    append(args[1:])
  else:
    raise ValueError('Unknown sub-command: {!r}.'.format(args[0]))


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
