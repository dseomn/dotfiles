#!/bin/bash

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


__have_findings=
pecho() { printf '%s\n' "$*"; }
log_finding() { pecho "NOTICE: $*"; __have_findings=yes; }


expect_var_eq() {
  local var="$1"
  local expected="$2"
  eval "local actual=\"\${${var}}\""
  if [[ "$actual" != "$expected" ]]; then
    log_finding "Expected \$${var} = ${expected}. Actual: ${actual}"
    return 1
  fi
  return 0
}

expect_command_exists() {
  local command="$1"
  if ! command -v "$command" > /dev/null; then
    log_finding "Missing command: $command"
    return 1
  fi
  return 0
}

expect_file_exists() {
  local file="$1"
  if ! [[ -f "$file" ]]; then
    log_finding "Missing file: $file"
    return 1
  fi
  return 0
}

expect_min_version() {
  local component="$1"
  local expected="$2"
  local actual="$3"

  local min_version="$(
      printf '%s\n%s\n' "$expected" "$actual" |
          sort --version-sort |
          head -n 1
  )"

  if [[ "$min_version" != "$expected" ]]; then
    log_finding "Expected ${component} >= ${expected}. Actual: ${actual}"
    return 1
  fi
  return 0
}


if expect_var_eq SHELL /bin/bash; then
  expect_min_version bash 4.4 "$BASH_VERSION"
fi


if expect_command_exists git; then
  expect_file_exists /usr/lib/git-core/git-sh-prompt
  expect_min_version git 2.11 "$(git --version | awk '{print $NF}')"

  if ! git config -f ~/.yadm/repo.git/config --get local.class > /dev/null; then
    log_finding "YADM's local.class is not set."
  fi
fi


if expect_command_exists tmux; then
  expect_min_version tmux 2.6 "$(tmux -V | awk '{print $NF}')"
fi


if expect_command_exists vim; then
  expect_min_version vim 8.0 "$(vim --version | head -n 1 | sed 's/^.* \([^ ]\+\) (.*$/\1/')"
fi


if [[ -n "$__have_findings" ]]; then
  exit 1
else
  exit 0
fi
