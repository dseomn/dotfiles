# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Code for a registry of multiple snippets."""


import importlib
import os
from typing import Iterable, Optional

import jinja2

from snipphthalate import comment
from snipphthalate import context
from snipphthalate import snippet


class NotFoundError(snippet.RenderError):
  """A snippet was not found."""


class Registry:
  """Registry of available snippets."""

  def __init__(self):
    """Initializer."""
    self._snippets = {}  # Map from tag to Snippet instance.

  def register(self, tag: str, snippet_: snippet.Snippet):
    """Registers a snippet.

    Args:
      tag: Short string to identify the snippet.
      snippet_: Snippet instance.
    """
    self._snippets[tag] = snippet_

  def tags(self, context_: context.Context) -> Iterable[str]:
    """Returns an iterable of all applicable snippet tags.

    Args:
      context_: Context in which the snippet could be expanded.
    """
    return {tag for tag, snippet_ in self._snippets.items()
            if snippet_.is_applicable(context_)}

  def render(self, tag: str, context_: context.Context) -> str:
    """Returns the expansion of a snippet.

    Args:
      tag: Tag of the snippet to render.
      context_: Context to render the template in.

    Raises:
      NotFoundError: The tag was not found.
      snippet.RenderError: Rendering the snippet failed.
    """
    try:
      snippet_ = self._snippets[tag]
    except KeyError:
      raise NotFoundError('Unknown snippet {!r}.'.format(tag))
    return snippet_.render(context_)


class _Jinja2Undefined(jinja2.Undefined):
  """Undefined variable handler for jinja2 snippets.

  This puts a placeholder in the expansion of the snippet.
  """

  def __str__(self):
    return '@!{}!@'.format(self._undefined_name)


def load_jinja2(registry: Registry, snippet_dirs: Iterable[str]) -> None:
  """Loads Jinja2 snippets.

  Args:
    registry: Registry to load snippets into.
    snippet_dirs: Directories to search for snippets in.
  """
  environment = jinja2.Environment(
      undefined=_Jinja2Undefined,
      autoescape=False,
      loader=jinja2.FileSystemLoader(
          [os.path.join(path, 'snippets') for path in snippet_dirs]),
  )
  environment.filters['comment.block'] = comment.block

  # Load snippets with python configuration.
  dirs_with_python = set()
  for snippet_dir in snippet_dirs:
    for dirpath, dirnames, filenames in os.walk(
        os.path.join(snippet_dir, 'snippets'), followlinks=True):
      for filename in filenames:
        if filename.endswith('.py'):
          dirs_with_python.add(dirpath)
          spec = importlib.util.spec_from_file_location(
              '<snipphthalate_snippet>', os.path.join(dirpath, filename))
          module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(module)
          if hasattr(module, 'register_jinja2'):
            module.register_jinja2(registry, environment)

  # Load snippets without python configuration.
  for snippet_dir in snippet_dirs:
    for dirpath, dirnames, filenames in os.walk(
        os.path.join(snippet_dir, 'snippets'), followlinks=True):
      if dirpath in dirs_with_python:
        del dirnames[:]
        continue
      dir_relpath = os.path.relpath(dirpath,
                                    os.path.join(snippet_dir, 'snippets'))
      for filename in filenames:
        if filename.endswith('.jinja2'):
          file_tag, _, _ = filename.rpartition('.')
          tag = os.path.normpath(os.path.join(dir_relpath, file_tag))
          registry.register(
              tag,
              snippet.Jinja2Snippet(
                  environment.get_template(
                      os.path.join(dir_relpath, filename))))


def default_registry(snippet_dirs: Optional[Iterable[str]] = None) -> Registry:
  """Returns the default snippet registry.

  Args:
    snippet_dirs: Directories to search for snippets in, or None to use the
      defaults.
  """
  if snippet_dirs is None:
    snippet_dirs = [
        os.path.join(os.getenv('HOME'), '.config', 'snipphthalate'),
    ]
  registry = Registry()
  load_jinja2(registry, snippet_dirs)
  return registry
