# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for snipphthalate.snippet."""


import unittest
from unittest import mock

import jinja2

from snipphthalate import context
from snipphthalate import snippet


class _CustomJinja2Snippet(snippet.Jinja2Snippet):
  """Class to test inheritance from Jinja2Snippet."""

  def jinja2_context(self, context_):
    return {'path': context_.path()}


class Jinja2SnippetTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    self._context = mock.create_autospec(context.Context)

  def test_is_applicable_by_default(self):
    self.assertTrue(
        snippet.Jinja2Snippet(jinja2.Template('')).is_applicable(self._context))

  def test_context_is_empty_by_default(self):
    self.assertEqual(
        {},
        snippet.Jinja2Snippet(
            jinja2.Template('')).jinja2_context(self._context))

  def test_render(self):
    for subtest, snippet_class, path, template, default_context, expected in (
        ('no_vars', snippet.Jinja2Snippet, None, 'kumquat', None, 'kumquat'),
        ('default_var', snippet.Jinja2Snippet, None, '{{foo}}', {'foo': 'bar'},
         'bar'),
        ('context_var', _CustomJinja2Snippet, 'quux', '{{path}}', None, 'quux'),
        ('context_overrides_default_var', _CustomJinja2Snippet, 'quux',
         '{{path}}', {'path': 'not-quux'}, 'quux'),
    ):
      with self.subTest(subtest):
        self._context.path.return_value = path
        actual = snippet_class(
            jinja2.Template(template), default_context).render(self._context)
        self.assertEqual(expected, actual)

  def test_render_error(self):
    with self.assertRaises(snippet.RenderError):
      snippet.Jinja2Snippet(jinja2.Template('{{foo.bar}}')).render(
          self._context)


if __name__ == '__main__':
  unittest.main()
