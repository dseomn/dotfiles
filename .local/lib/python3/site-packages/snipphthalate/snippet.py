# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Code for individual snippets."""


import abc
from typing import Any, Dict, Optional

import jinja2

from snipphthalate import context


class RenderError(Exception):
  """Base error for snippet rendering."""


class Snippet(abc.ABC):
  """Base class for all snippets."""

  @abc.abstractmethod
  def render(self, context_: context.Context) -> str:
    """Returns the expansion of this snippet.

    Args:
      context_: Context to expand the snippet in.

    Raises:
      RenderError: Rendering failed.
    """
    raise NotImplementedError()


class Jinja2Snippet(Snippet):
  """Snippet using a Jinja2 template."""

  def __init__(self, template: jinja2.Template,
               default_context: Optional[Dict[str, Any]] = None):
    """Initializer.

    Args:
      template: Jinja2 Template to render.
      default_context: Defaults to use for the template context, or None for no
        defaults.
    """
    self._template = template
    self._default_context = default_context or {}

  def render(self, context_: context.Context) -> str:
    jinja2_context = {
        'context': context_,
    }
    for key, value in self._default_context.items():
      jinja2_context.setdefault(key, value)
    try:
      return self._template.render(jinja2_context)
    except jinja2.TemplateError as e:
      raise RenderError('Error rendering Jinja2 template: {}'.format(e))
