# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for snipphthalate.registry."""


import collections
import os
import tempfile
import textwrap
import unittest
from unittest import mock

import jinja2

from snipphthalate import context
from snipphthalate import plugin
from snipphthalate import registry
from snipphthalate import snippet


class _TestSnippet(snippet.Jinja2Snippet):

  def __init__(self, template_string):
    super().__init__(jinja2.Template(template_string))


class _TestSnippetPlugin(plugin.Jinja2SnippetPlugin):

  def __init__(self, variants=None, ignored_variants=(), jinja2_context=None):
    """Initializer.

    Args:
      variants: Variants to register.
      ignored_variants: Variants that are not applicable.
      jinja2_context: Map from variant (or None) to jinja2 context dict.
    """
    super().__init__()
    self.variants = variants or []
    self._ignored_variants = ignored_variants
    self._jinja2_context = jinja2_context or collections.defaultdict(dict)

  def is_applicable(self, snipphthalate_context, tag, variant):
    return variant not in self._ignored_variants

  def update_context(self, jinja2_context, snipphthalate_context, variant):
    jinja2_context.update(self._jinja2_context[variant])


class RegistryTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    self._context = mock.create_autospec(context.Context)
    self._registry = registry.Registry()

  def test_register_snippet_overrides(self):
    """Tests that the last snippet for a tag is the one that stays."""
    self._registry.register_snippet('foo', _TestSnippet('bar'))
    self._registry.register_snippet('foo', _TestSnippet('quux'))
    self.assertEqual('quux', self._registry.render('foo', self._context))

  def test_variants(self):
    self._registry.register_plugin(
        '', _TestSnippetPlugin(('root0',), ('foo1',)))
    self._registry.register_plugin('', _TestSnippetPlugin(('root1',)))
    self._registry.register_plugin('foo', _TestSnippetPlugin(('foo0', 'foo1')))
    self._registry.register_plugin('foo/bar', _TestSnippetPlugin(('bar0',)))
    self.assertEqual(
        set((None, 'root0', 'root1', 'foo0', 'bar0')),
        set(self._registry.variants(self._context, 'foo/bar')))

  def test_tags(self):
    self._registry.register_plugin('foo', _TestSnippetPlugin(('a', 'b')))
    self._registry.register_snippet('foo', _TestSnippet('bar'))
    self._registry.register_snippet('zzz', _TestSnippet('quux'))
    self.assertSequenceEqual(
        sorted(('foo', 'foo(a)', 'foo(b)', 'zzz')),
        sorted(self._registry.tags(self._context)))

  def test_render_not_found(self):
    with self.assertRaises(registry.NotFoundError):
      self._registry.render('foo', self._context)

  def test_render(self):
    self._registry.register_plugin(
        'foo',
        _TestSnippetPlugin(
            ('a',),
            (),
            {
                None: {'abc': 'uvw'},
                'a': {'abc': 'zyx'},
            }))
    self._registry.register_snippet('foo', _TestSnippet('{{abc}}'))
    self.assertEqual('uvw', self._registry.render('foo', self._context))
    self.assertEqual('zyx', self._registry.render('foo(a)', self._context))


class DefaultRegistryTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    self._context = mock.create_autospec(context.Context)

  def _default_registry(self, files):
    """Returns a default registry configured from the specified files.

    Args:
      files: Map from filename (relative to a config root directory) to file
        contents.
    """
    config_dir = tempfile.TemporaryDirectory()
    self.addCleanup(config_dir.cleanup)
    for filename, contents in files.items():
      filename = os.path.join(config_dir.name, filename)
      os.makedirs(os.path.dirname(filename), exist_ok=True)
      with open(filename, 'w') as fh:
        fh.write(contents)
    return registry.default_registry((config_dir.name,))

  def test_noop_files(self):
    registry_ = self._default_registry({
        'snippets/foo.aardvark': '',  # Unknown files should be ignored.
        'snippets/_foo/bar.jinja2': '',  # Private directory.
        'snippets/foo/_bar.jinja2': '',  # Private file.
        'snippets/quux.py': ''  # Empty file with no plugins.
    })
    self.assertEqual(0, len(tuple(registry_.tags(self._context))))

  def test_filename_to_tag_mappings(self):
    registry_ = self._default_registry({
        'snippets/__init__.jinja2': '',
        'snippets/foo.jinja2': '',
        'snippets/bar/__init__.jinja2': '',
        'snippets/bar/quux.jinja2': '',
    })
    self.assertSequenceEqual(
        sorted(('', 'foo', 'bar', 'bar/quux')),
        sorted(registry_.tags(self._context)))

  def test_jinja2_undefined(self):
    registry_ = self._default_registry({'snippets/foo.jinja2': '{{bar}}'})
    self.assertEqual('@!bar!@', registry_.render('foo', self._context))

  def test_python_plugin_with_jinja2_snippet(self):
    registry_ = self._default_registry({
        'snippets/foo/__init__.py':
            textwrap.dedent("""
                from snipphthalate import plugin
                class MyPlugin(plugin.Jinja2SnippetPlugin):
                  def __init__(self):
                    super().__init__()
                    self.variants = ['a']

                  def update_context(
                      self, jinja2_context, snipphthalate_context, variant):
                    jinja2_context['zyx'] = 'kumquat'
                    jinja2_context['variant'] = variant
            """),
        'snippets/foo/bar.jinja2': '{{zyx}}.{{variant}}'
    })
    self.assertEqual('kumquat.None', registry_.render('foo/bar', self._context))
    self.assertEqual('kumquat.a', registry_.render('foo/bar(a)', self._context))


if __name__ == '__main__':
  unittest.main()
