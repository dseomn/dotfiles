# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for snipphthalate.registry."""


import os
import tempfile
import textwrap
import unittest
from unittest import mock

import jinja2

from snipphthalate import context
from snipphthalate import registry
from snipphthalate import snippet


class _TestSnippet(snippet.Jinja2Snippet):

  def __init__(self, template_string):
    super().__init__(jinja2.Template(template_string))


class RegistryTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    self._context = mock.create_autospec(context.Context)
    self._registry = registry.Registry()

  def test_register_overrides_snippet(self):
    """Tests that the last snippet for a tag is the one that stays."""
    self._registry.register('foo', _TestSnippet('bar'))
    self._registry.register('foo', _TestSnippet('quux'))
    self.assertEqual('quux', self._registry.render('foo', self._context))

  def test_tags(self):
    self._registry.register('foo', _TestSnippet('bar'))
    self._registry.register('zzz', _TestSnippet('quux'))
    self.assertSequenceEqual(
        sorted(('foo', 'zzz')), sorted(self._registry.tags(self._context)))

  def test_render_not_found(self):
    with self.assertRaises(registry.NotFoundError):
      self._registry.render('foo', self._context)

  def test_render(self):
    self._registry.register('foo', _TestSnippet('bar'))
    self.assertEqual('bar', self._registry.render('foo', self._context))


class DefaultRegistryTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    self._context = mock.create_autospec(context.Context)

  def _default_registry(self, files):
    """Returns a default registry configured from the specified files.

    Args:
      files: Map from filename (relative to a config root directory) to file
        contents.
    """
    snippet_dir = tempfile.TemporaryDirectory()
    self.addCleanup(snippet_dir.cleanup)
    for filename, contents in files.items():
      filename = os.path.join(snippet_dir.name, filename)
      os.makedirs(os.path.dirname(filename), exist_ok=True)
      with open(filename, 'w') as fh:
        fh.write(contents)
    return registry.default_registry((snippet_dir.name,))

  def test_ignore_unknown_file(self):
    registry_ = self._default_registry({'snippets/foo.aardvark': ''})
    self.assertEqual(0, len(registry_.tags(self._context)))

  def test_empty_python(self):
    registry_ = self._default_registry({'snippets/foo/__init__.py': ''})
    self.assertEqual(0, len(registry_.tags(self._context)))

  def test_jinja2_snippet_python(self):
    """Tests a jinja2 snippet with python configuration."""
    registry_ = self._default_registry({
        'snippets/foo/__init__.py':
            textwrap.dedent("""
                from snipphthalate import snippet
                def register_jinja2(registry, environment):
                  registry.register(
                      'foo/bar',
                      snippet.Jinja2Snippet(
                          environment.get_template('foo/__init__.jinja2')))
            """),
        'snippets/foo/__init__.jinja2': 'zyx'
    })
    self.assertEqual('zyx', registry_.render('foo/bar', self._context))

  def test_jinja2_snippet_no_python(self):
    """Tests a jinja2 snippet without python configuration.

    Additionally, tests that undefined variables are replaced with noticeable
    placeholder markers.
    """
    registry_ = self._default_registry({'snippets/foo.jinja2': '{{bar}}'})
    self.assertEqual('@!bar!@', registry_.render('foo', self._context))

  def test_jinja2_snippet_shadowed_by_python(self):
    """Tests that no jinja2 files get tags if they're under a python dir."""
    for subtest, py_file, jinja2_file in (
        ('same_dir', 'foo/foo.py', 'foo/bar.jinja2'),
        ('sub_dir', 'foo/foo.py', 'foo/bar/quux.jinja2'),
    ):
      with self.subTest(subtest):
        registry_ = self._default_registry({
            'snippets/other/asparagus.jinja2': '',
            'snippets/{}'.format(py_file): '',
            'snippets/{}'.format(jinja2_file): '',
        })
        self.assertSequenceEqual(
            sorted(('other/asparagus',)), sorted(registry_.tags(self._context)))


if __name__ == '__main__':
  unittest.main()
