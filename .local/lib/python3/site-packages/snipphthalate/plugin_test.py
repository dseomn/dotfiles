# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tests for snipphthalate.plugin."""

import tempfile
import textwrap
import unittest
from unittest import mock

from snipphthalate import context
from snipphthalate import plugin


class MetaPluginTest(unittest.TestCase):

  def test_empty_by_default(self):
    self.assertEqual([], plugin.MetaPlugin().children)


class RecurseTest(unittest.TestCase):

  def test_recursion(self):
    a = plugin.Plugin()
    b = plugin.Plugin()
    c = plugin.MetaPlugin()
    c.children = [a, b]
    d = plugin.MetaPlugin()
    self.assertSequenceEqual((a, b, c, d), tuple(plugin.recurse((c, d))))

  def test_filtering(self):
    a = plugin.Plugin()
    b = plugin.MetaPlugin()
    self.assertSequenceEqual((b,),
                             tuple(plugin.recurse((a, b), plugin.MetaPlugin)))


class PythonMetaPluginTest(unittest.TestCase):

  def test_init(self):
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py') as fh:
      fh.write(
          textwrap.dedent("""
          from snipphthalate import plugin
          class _ThisShouldBeIgnored(plugin.Plugin):
            pass
          class MyPlugin(plugin.Plugin):
            pass
          not_a_plugin = None
      """))
      fh.flush()
      meta_plugin = plugin.PythonMetaPlugin(fh.name)
      self.assertEqual(1, len(meta_plugin.children))
      self.assertEqual('MyPlugin', meta_plugin.children[0].__class__.__name__)


class SnippetPluginTest(unittest.TestCase):

  def test_init(self):
    self.assertEqual([], plugin.SnippetPlugin().variants)

  def test_is_applicable(self):
    self.assertTrue(plugin.SnippetPlugin().is_applicable(
        mock.create_autospec(context.Context), '', None))


class Jinja2SnippetPluginTest(unittest.TestCase):

  def test_update_context_noop_by_default(self):
    jinja2_context = {'foo': 'bar'}
    plugin.Jinja2SnippetPlugin().update_context(
        jinja2_context, mock.create_autospec(context.Context), None)
    self.assertEqual({'foo': 'bar'}, jinja2_context)


class YamlPluginTest(unittest.TestCase):

  def test_jinja2(self):
    with tempfile.NamedTemporaryFile(mode='w') as fh:
      fh.write(
          textwrap.dedent("""
        env:
          foo: bar
        variants:
          quux:
            env:
              aardvark: kumquat
      """))
      fh.flush()
      plugin_ = plugin.YamlPlugin(fh.name)
    jinja2_context = {}
    plugin_.update_context(jinja2_context,
                           mock.create_autospec(context.Context), None)
    jinja2_context_quux = {}
    plugin_.update_context(jinja2_context_quux,
                           mock.create_autospec(context.Context), 'quux')
    self.assertEqual(['quux'], plugin_.variants)
    self.assertEqual({'foo': 'bar'}, jinja2_context)
    self.assertEqual({'foo': 'bar', 'aardvark': 'kumquat'}, jinja2_context_quux)


if __name__ == '__main__':
  unittest.main()
