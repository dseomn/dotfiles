# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Context information for snippets."""


import abc
from typing import Optional


class Context(abc.ABC):
  """The context in which a snippet could be rendered."""

  @abc.abstractmethod
  def path(self) -> Optional[str]:
    """Returns the full path to the current file, or None."""
    raise NotImplementedError()

  @abc.abstractmethod
  def filetype(self) -> Optional[str]:
    """Returns a string describing the type of file, or None for unknown."""
    raise NotImplementedError()


class VimContext(Context):
  """Context implementation that uses vim's python module."""

  def __init__(self, vim):
    """Initializer.

    Args:
      vim: VIM python module to get the context from.
    """
    self._vim = vim

  def path(self) -> Optional[str]:
    return self._vim.current.buffer.name or None

  def filetype(self) -> Optional[str]:
    # TODO: Map this to something more generic than vim filetypes?
    return self._vim.current.buffer.options['filetype'] or None
