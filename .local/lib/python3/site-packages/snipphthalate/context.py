# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Context information for snippets."""

import abc
from typing import Optional, Tuple


class Context(abc.ABC):
  """The context in which a snippet could be rendered."""

  @abc.abstractmethod
  def path(self) -> Optional[str]:
    """Returns the full path to the current file, or None."""
    raise NotImplementedError()

  @abc.abstractmethod
  def filetype(self) -> Optional[str]:
    """Returns a string describing the type of file, or None for unknown."""
    raise NotImplementedError()

  def prefixed_comment(self) -> Optional[str]:
    """Returns a string that comments out the rest of a line, or None.

    E.g., this could return '#' or '//'.
    """
    return None

  def contained_comment(self) -> Optional[Tuple[str, str, str]]:
    """Returns a tuple of strings than can contain a comment, or None.

    The first item in the tuple is the start of a comment, e.g., '/*'. Then the
    prefix for each middle line in a block comment, e.g., ' *'. Then the end of
    the comment, e.g., ' */'. (Note the spaces for alignment of a block.)

    The first and last can be used to create '/* inline comments */', or all
    three can be used to create block comments.
    """
    return None


class VimContext(Context):
  """Context implementation that uses vim's python module."""

  def __init__(self, vim):
    """Initializer.

    Args:
      vim: VIM python module to get the context from.
    """
    self._vim = vim

  def path(self) -> Optional[str]:
    return self._vim.current.buffer.name or None

  def filetype(self) -> Optional[str]:
    # TODO: Map this to something more generic than vim filetypes?
    return self._vim.current.buffer.options['filetype'].decode() or None

  def prefixed_comment(self) -> Optional[str]:
    for part in (self._vim.current.buffer.options['comments'].decode()
                 .split(',')):
      flags, _, string = part.partition(':')
      if flags in ('', 'b'):
        return string
    return None

  def contained_comment(self) -> Optional[Tuple[str, str, str]]:
    # TODO: Support more of the 'comments' option's grammar.
    parts = [
        part.partition(':') for part in (
            self._vim.current.buffer.options['comments'].decode().split(','))
    ]
    for (
        (start_flags, _, start_string),
        (mid_flags, _, mid_string),
        (end_flags, _, end_string),
    ) in zip(parts, parts[1:], parts[2:]):
      if start_flags not in ('s', 's1'):
        continue
      elif mid_flags not in ('m', 'mb'):
        continue
      elif end_flags not in ('e', 'ex'):
        continue
      continuation_prefix = '' if start_flags == 's' else ' '
      return (start_string, continuation_prefix + mid_string,
              continuation_prefix + end_string)
    return None
