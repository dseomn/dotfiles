# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for snipphthalate.context."""


import unittest
from unittest import mock

from snipphthalate import context


class _FakeContext(context.Context):
  """Fake Context implementation for testing Context itself."""

  def path(self):
    return super().path()

  def filetype(self):
    return super().filetype()


class ContextTest(unittest.TestCase):

  def test_path_not_implemented(self):
    with self.assertRaises(NotImplementedError):
      _FakeContext().path()

  def test_filetype_not_implemented(self):
    with self.assertRaises(NotImplementedError):
      _FakeContext().filetype()


class VimContextTest(unittest.TestCase):

  def setUp(self):
    super().setUp()
    # Unfortunately, the vim module doesn't seem to be available outside of vim.
    self._vim = mock.Mock()
    self._context = context.VimContext(self._vim)

  def test_path(self):
    for subtest, buffer_name, path in (
        ('empty', '', None),
        ('non_empty', 'kumquat', 'kumquat'),
    ):
      with self.subTest(subtest):
        self._vim.current.buffer.name = buffer_name
        self.assertEqual(path, self._context.path())

  def test_filetype(self):
    for subtest, buffer_filetype, filetype in (
        ('empty', b'', None),
        ('non_empty', b'python', 'python'),
    ):
      with self.subTest(subtest):
        self._vim.current.buffer.options = {'filetype': buffer_filetype}
        self.assertEqual(filetype, self._context.filetype())


if __name__ == '__main__':
  unittest.main()
