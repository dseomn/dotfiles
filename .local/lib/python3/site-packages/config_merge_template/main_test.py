"""Tests for config_merge_template.main."""

import os
import tempfile
import textwrap
import unittest
from unittest import mock

from config_merge_template import main


class MainTest(unittest.TestCase):

  def _make_config_dir(self, basename, extension, config_contents,
                       template_contents):
    """Creates a config directory.

    Args:
      basename: Base name of the config file and template file.
      extension: Extension of the template relative to the config file, e.g.,
        '.ini.jinja2'.
      config_contents: Contents of the config file, or None to not create the
        config file.
      template_contents: Contents of the template file.

    Returns:
      Tuple of config directory (with symlink) and data directory (with config
      and template files).
    """
    root_dir = tempfile.TemporaryDirectory()
    self.addCleanup(root_dir.cleanup)
    data_dir = os.path.join(root_dir.name, 'data')
    os.mkdir(data_dir)
    if config_contents is not None:
      with open(os.path.join(data_dir, basename), 'w') as fh:
        fh.write(config_contents)
    with open(os.path.join(data_dir, basename + extension), 'w') as fh:
      fh.write(template_contents)
    config_dir = os.path.join(root_dir.name, 'config')
    os.mkdir(config_dir)
    os.symlink(
        os.path.join(data_dir, basename + extension),
        os.path.join(config_dir, basename))
    return config_dir, data_dir

  def test_regular_file_is_ignored(self):
    """Tests that a regular file in config_dir does not cause an exception."""
    with tempfile.TemporaryDirectory() as config_dir:
      os.mkdir(os.path.join(config_dir, 'foo'))
      with open(os.path.join(config_dir, 'foo', 'bar'), 'w') as fh:
        fh.write('kumquat')
      main.main(config_dir)

  def test_invalid_template_filename(self):
    for dir_name, template_name in (
        ('foo', 'bar'),
        ('foo.bar', 'baz.quux'),
    ):
      with self.subTest(os.path.join(dir_name, template_name)):
        with tempfile.TemporaryDirectory() as root_dir:
          data_dir = os.path.join(root_dir, 'data')
          os.mkdir(data_dir)
          os.mkdir(os.path.join(data_dir, dir_name))
          with open(os.path.join(data_dir, dir_name, template_name), 'w') as fh:
            fh.write('kumquat')
          config_dir = os.path.join(root_dir, 'config')
          os.mkdir(config_dir)
          os.symlink(
              os.path.join(data_dir, dir_name, template_name),
              os.path.join(config_dir, 'orange'))
          with self.assertRaisesRegex(ValueError,
                                      'Missing config and/or template format'):
            main.main(config_dir)

  def test_backup_file_created(self):
    config_dir, data_dir = self._make_config_dir('config', '.ini.jinja2',
                                                 '[apple]\n', '')
    main.main(config_dir)
    with open(os.path.join(data_dir, 'config.old'), 'r') as fh:
      self.assertEqual('[apple]\n', fh.read())

  def test_unknown_config_format(self):
    config_dir, _ = self._make_config_dir('config', '.unknown.jinja2', None, '')
    with self.assertRaisesRegex(ValueError, 'Unknown config format'):
      main.main(config_dir)

  def test_unknown_template_format(self):
    config_dir, _ = self._make_config_dir('config', '.ini.unknown', None, '')
    with self.assertRaisesRegex(ValueError, 'Unknown template format'):
      main.main(config_dir)

  def test_ini_and_jinja2_without_existing_config(self):
    config_dir, data_dir = self._make_config_dir(
        'config',
        '.ini.jinja2',
        None,
        textwrap.dedent("""\
            [quux]
            apple={{ config.getint('foo', 'bar', fallback=2) + 1 }}
            [foo]
            {{ copy('foo', 'bar') }}
        """),
    )
    main.main(config_dir)
    with open(os.path.join(data_dir, 'config'), 'r') as fh:
      self.assertEqual(
          textwrap.dedent("""\
              [quux]
              apple=3
              [foo]
          """),
          fh.read(),
      )

  def test_ini_and_jinja2_with_existing_config(self):
    config_dir, data_dir = self._make_config_dir(
        'config',
        '.ini.jinja2',
        textwrap.dedent("""\
            [foo]
            bar=1
        """),
        textwrap.dedent("""\
            [quux]
            apple={{ config.getint("foo", "bar") + 1 }}
            [foo]
            {{ copy('foo', 'bar') }}
        """),
    )
    main.main(config_dir)
    with open(os.path.join(data_dir, 'config'), 'r') as fh:
      self.assertEqual(
          textwrap.dedent("""\
              [quux]
              apple=2
              [foo]
              bar=1
          """),
          fh.read(),
      )

  def test_null_parser(self):
    config_dir, data_dir = self._make_config_dir('config', '.null.jinja2', None,
                                                 'foo')
    main.main(config_dir)
    with open(os.path.join(data_dir, 'config'), 'r') as fh:
      self.assertEqual('foo', fh.read())


if __name__ == '__main__':
  unittest.main()
