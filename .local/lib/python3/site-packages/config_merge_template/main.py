# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Main entrypoint for config_merge_template.

This reads symlinks from _CONFIG_DIR, which determine the config files to
update. Each symlink must point to a file that ends in
.config-format.template-format where config-format is one of:

  ini: INI file, parsed with python's standard configparser.

and template-format is one of:

  jinja2: Jinja2 template.

The file pointed to is the template to merge. The raw config file is the same
path as the template, but without the .config-format.template-format extension.

E.g.:

  ~/.config/config-merge-template/foo -> ~/.config/foorc.ini.jinja2
  ~/.config/foorc: Config file to manage, in INI format.
  ~/.config/foorc.ini.jinja2: Template for ~/.config/foorc.
"""

import configparser
import os
import shutil
from typing import Any, Generator, Tuple

import jinja2

_CONFIG_DIR = os.path.join(os.environ['HOME'], '.config',
                           'config-merge-template')


def _get_templates(config_dir: str) -> Generator[str, None, None]:
  """Yields template files to process.

  Args:
    config_dir: Directory to search.
  """
  for dirpath, dirnames, filenames in os.walk(config_dir):
    for filename in filenames:
      symlink = os.path.join(dirpath, filename)
      try:
        template = os.path.join(os.path.dirname(symlink), os.readlink(symlink))
      except OSError:
        continue  # The file is not a symlink.
      yield template


def _parse_template_filename(filename: str) -> Tuple[str, str, str]:
  """Parses a template filename.

  Args:
    filename: Name to parse.

  Returns:
    Tuple of the config file for the template, the config format, and the
    template format.

  Raises:
    ValueError: Invalid filename.
  """
  parts = filename.rsplit('.', maxsplit=2)
  error = ValueError(
      'Missing config and/or template format: {!r}'.format(filename))
  if len(parts) != 3:
    raise error
  config_filename, config_format, template_format = parts
  if os.path.sep in config_format or os.path.sep in template_format:
    raise error
  return config_filename, config_format, template_format


def _replace(filename: str, contents: str) -> None:
  """Replaces a file with new contents.

  Args:
    filename: File to replace.
    contents: New contents for filename.
  """
  old = filename + '.old'
  new = filename + '.new'
  with open(new, 'x') as fh:
    fh.write(contents)
  try:
    shutil.copy2(filename, old)
  except FileNotFoundError:
    pass
  os.replace(new, filename)


def _read_ini(filename: str) -> configparser.ConfigParser:
  """Returns a parsed INI file, or an empty INI config object.

  Args:
    filename: File to parse. If this does not exist, an empty config is
      returned
  """
  config = configparser.ConfigParser(interpolation=None)
  config.optionxform = lambda x: x
  config.read(filename)
  return config


def _copy_ini(config: configparser.ConfigParser, section: str, option: str) -> str:
  """Returns the text needed to set the given option.

  If the option isn't set in the old config, this returns the empty string.

  Args:
    config: Old configuration.
    section: Section to copy from.
    option: Option to copy.
  """
  if config.has_option(section, option):
    return '{}={}\n'.format(option, config.get(section, option))
  else:
    return ''


def _render_jinja2(filename: str, **kwargs: Any) -> str:
  """Returns a rendered template.

  Args:
    filename: Template filename.
    **kwargs: Template environment.
  """
  with open(filename, 'r') as fh:
    template = jinja2.Template(fh.read(), autoescape=False)
  return template.render(**kwargs)


def main(config_dir: str = _CONFIG_DIR) -> None:
  """Main.

  Args:
    config_dir: Directory to search.
  """
  for template_filename in _get_templates(config_dir):
    config_filename, config_format, template_format = _parse_template_filename(
        template_filename)

    render_kwargs = {
        'env': os.environ,
    }

    if config_format == 'ini':
      config_old = _read_ini(config_filename)
      render_kwargs['copy'] = lambda *args: _copy_ini(config_old, *args)
    else:
      raise ValueError('Unknown config format: {!r}'.format(config_format))

    render_kwargs['config'] = config_old

    if template_format == 'jinja2':
      config_new_str = _render_jinja2(template_filename, **render_kwargs)
    else:
      raise ValueError('Unknown template format: {!r}'.format(template_format))

    _replace(config_filename, config_new_str)


if __name__ == '__main__':
  main()
